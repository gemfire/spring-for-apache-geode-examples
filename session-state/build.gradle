/*
 * Copyright (C) 2019-Present Pivotal Software, Inc. All rights reserved.
 *
 * This program and the accompanying materials are made available under the terms of the under the Apache License, Version
 * 2.0 (the "License‚Äù); you may not use this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

plugins {
    id 'org.springframework.boot' version '2.4.1'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id("com.github.node-gradle.node") version "2.2.4"
}

group = 'com.vmware.tanzu.gemfire.session-state-example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'


configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

bootBuildImage{
    imageName = "docker.io/[YOUR DOCKER USERNAME]/notes-app:${project.version}"
}

repositories {
    mavenCentral()
}

ext {
    set('springGeodeVersion', "1.4.0")
}

dependencies {
	implementation 'org.springframework.geode:spring-geode-starter'
    implementation 'org.springframework.geode:spring-geode-starter-session'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.geode:spring-geode-bom:${springGeodeVersion}"
    }
}

test {
    useJUnitPlatform()
}


node {

    version = '14.15.4'
    npmVersion = '6.14.10'
    download = true

    // Set the work directory for unpacking node
    workDir = file("build/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("build/node")
    // Set the work directory for Yarn
    yarnWorkDir = file("build/yarn")
}

task appYarnInstall(type: YarnTask) {
    description = "Installs all dependencies from package.json"
    workingDir = file("frontend")
    args = ["install"]
}

task appYarnBuild(type: YarnTask) {
    description = "Builds production version of the frontend"
    workingDir = file("frontend")
    args = ["run", "build"]
}

task copyFrontEnd(type: Copy) {
    from 'frontend/build'
    into 'build/resources/main/static/'
}

task appYarnTest(type: YarnTask) {
    description = "Builds production version of the frontend"
    workingDir = file("frontend")
    args = ["run", "test"]
}


appYarnBuild.dependsOn appYarnInstall
copyFrontEnd.dependsOn appYarnBuild
processResources.dependsOn copyFrontEnd

appYarnTest.dependsOn appYarnInstall
test.dependsOn appYarnTest